/*This Keyword
In JavaScript, the this keyword provides a function with context.

A function may act different depending on what this is:

function logout() {
    if(this.isLoggedIn) {
        this.removeAuthToken();
        this.redirectToSignIn();
    }
}
As we'll learn in the Prototype Chain lesson, JavaScript has a powerful tool for 
creating new objects and linking them to a common function. These functions can be 
written once and applied to whatever this is.

// an example of a "constructor" function
// we'll explore this in further detail
function Person() {
    this.name = "Steve";
    this.age = 32;
}

In global scope (not inside of a function), this refers to the module itself 
within Node.js or the window within the browser.

When it comes to functions, this can be set in a few different ways. Let's 
focus first on how we can explicitly set it.

function sum() {
    return this.a + this.b;
}
If we were to run sum() directly, this would be set from the global scope and
 likely neither a nor b would be defined.

We could instead, call the function with a specific context:

const result = sum.call({ a: 2, b: 4 });

console.log(result); // 6 
The method call is available on all JavaScript functions. The first argument we
 pass to call becomes this inside the function.

Call Versus Apply
Call and Apply are very similar methods. They both exist on every JavaScript 
function and they both allow you to set the context this.

The difference comes when you want to pass arguments to the function:

function totalThings(a, b, c) {
    return `There are ${a + b + c} ${this}`;
}
Let's say we wanted this string to be: "There are 15 Students". There are two 
ways we could go about it. We could use call:

totalThings.call("Students", 10, 3, 2);
Or we can use apply:

totalThings.apply("Students", [10, 3, 2]);
In both cases, this is set to "Students" and the arguments a, b and c are the
 values 10, 3 and 2 respectively.

The difference is that call takes a list of arguments, while apply takes a 
single array of arguments.
*/

//Using This
/*
Binding
Rather than relying on a function to be called with the correct this at the time of invocation, we can bind functions:

function thisName() {
    return this.name;
}

const newFunction = thisName.bind({ name: 'Ted' }); 

console.log(newFunction()); // Ted
console.log(thisName()); // undefined
 Notice that bind does not change the nature of the original function. It creates a new function that is bound with the provided this.

Once a function is bound, the binding cannot be overwritten. Let's say we tried to bind newFunction from above:

const newFunction2 = newFunction.bind({ name: 'Walt' });

console.log(newFunction2()); // Ted

Binding Arguments
You can bind arguments to a function to create partially applied functions. Take a look!

function add(x, y) {
    return x + y;
}
Not a very exciting function on it's own, we can bind an argument to add to create a new type of function:

const addTwo = add.bind(null, 2);

console.log( addTwo(2) ); // 4
console.log( addTwo(10) ); // 12

Task

Create a new function from thisName that is bound to 
an object with the name "Bob".

Export this new function instead of thisName.

When it is called, it should return "Bob":

*/

function thisName() {
    return this.name;    
}
const newFunction = thisName.bind({name:"Bob"})

module.exports = newFunction;

/*
Explanation:

Explanation:

The function thisName is defined to return this.name.
 This function doesn't have any context (this) of its own yet.
newFunction is created by binding thisName to a new object
 { name: "Bob" }. This sets the this context of thisName to
 this new object.
We export newFunction. When newFunction is called, it will
 return "Bob" because it's bound to an object where name is
  "Bob".
This code should work as expected in your scenario.
 Remember to call newFunction and not thisName to get the
  desired output.
*/

//Binding This

/*
Binding
Rather than relying on a function to be called with the correct this at the time of invocation, we can bind functions:

function thisName() {
    return this.name;
}

const newFunction = thisName.bind({ name: 'Ted' }); 

console.log(newFunction()); // Ted
console.log(thisName()); // undefined
 Notice that bind does not change the nature of the original function. It creates a new function that is bound with the provided this.

Once a function is bound, the binding cannot be overwritten. Let's say we tried to bind newFunction from above:

const newFunction2 = newFunction.bind({ name: 'Walt' });

console.log(newFunction2()); // Ted

Binding Arguments
You can bind arguments to a function to create partially applied functions. Take a look!

function add(x, y) {
    return x + y;
}
Not a very exciting function on it's own, we can bind an argument to add to create a new type of function:

const addTwo = add.bind(null, 2);

console.log( addTwo(2) ); // 4
console.log( addTwo(10) ); // 12

Task

Create a new function from thisName that is bound to 
an object with the name "Bob".

Export this new function instead of thisName.

When it is called, it should return "Bob":

*/

function thisName() {
    return this.name;    
}
const newFunction = thisName.bind({name:"Bob"})

module.exports = newFunction;

/*
Explanation:

Explanation:

The function thisName is defined to return this.name.
 This function doesn't have any context (this) of its own yet.
newFunction is created by binding thisName to a new object
 { name: "Bob" }. This sets the this context of thisName to
 this new object.
We export newFunction. When newFunction is called, it will
 return "Bob" because it's bound to an object where name is
  "Bob".
This code should work as expected in your scenario.
 Remember to call newFunction and not thisName to get the
  desired output.
*/



//Implicit Binding

/*
Call-Site
Without explicitly setting this with call or apply, there are a few rules that dictate what this will be for a function.

These rules depend on how the function is called. Let's take a look at a function defined as an object's property:

const obj = {
    value: 2,
    getValue: function() {
        return this.value;
    }
}
 Depending on how we call getValue, the result could be very different:

console.log( obj.getValue() ); // 2
We called the function by accessing it on the object's property. The this keyword is implictly bound to the object it is being called on.

Let's see another example using the same obj:

const fn = obj.getValue;

console.log( fn() ); // undefined
Whoops! 

In this second example, this is not the obj itself. It is actually the global this. Without being called directly on the object, this is not bound at all!

 The place where the function is called is generally referred to as the call-site of the function. If the function is not otherwise bound, it will determine the value of this.

 Your Goal: Add Get Name
Add a function getName to the obj that will retrieve the name when it is called on an object.

For example:

const name = obj.getName();

console.log(name); // Bob
 */

const obj = {
    name: 'Bob',
    getName: function(){
        return this.name;
    }
}
module.exports = obj;



//Unbound Function
/*

Task
Within the function Celebrity, a method is used to fetch the
 celebrity's age. The second argument to fetchAge is a 
 callback function. The callback function will receive age 
 as an argument.

 Unfortunately, due to the function call-site, this will 
 be re-defined to not refer to the celebrity. Running the 
 tests without modifying the code will result in a TypeError.

Fix this.age to refer to the same this as the function 
Celebrity.

Solution:

The issue in the code arises because the this
 inside the callback function of fetchAge does not refer to 
 the Celebrity instance. To fix this, you can use an arrow 
 function, which does not have its own this context 
 and instead inherits it from the surrounding code.

Now the arrow function inside fetchAge will correctly
refer to this as the instance of Celebrity, 
allowing this.age to be set appropriately.
*/
const fetchAge = require('./fetchAge');

function Celebrity(name) {
    this.name = name;

    fetchAge(this.name,  (age)=> {
        this.age = age;
    } );
}

module.exports = Celebrity;




//Prototype Chain

//Taking Shape

/*
Task

The Shape function will take two arguments: x and y. 
Store these values in an object position on the instance (this).

For reference see this example. The tests will invoke Shape
with the new keyword, creating an object and setting it to 
this within the function.

The position should have keys x and y containing the 
corresponding values:

const shape = new Shape(5, 10);

console.log(shape.position.x) // 5
console.log(shape.position.y) // 10
 Notice that position is an object with two keys x and y!
*/

// Our Shape "Constructor"
function Shape(x, y) {
    // store x and y in this.position
    this.position = {
        x : x,
        y : y
    }
}
/*const shape = new Shape(5, 10);
console.log(shape.position.x); // 5
console.log(shape.position.y); // 10*/

/*
Task
Create a function move that will be added to the
 Shape.prototype. This function should take two 
 arguments: x and y.

It should move the shape's position by adding the corresponding
arguments value:

const shape = new Shape(1, 1);

shape.move(1, 4);

console.log( shape.position.x ); // 2
console.log( shape.position.y ); // 5
*/

function Shape(x,y){
    this.position= {x,y}
}
Shape.prototype.move = function(dx,dy){
    this.position.x += dx;
    this.position.y += dy;

};
const shape = new Shape(1,1);
shape.move(1,4);
console.log( shape.position.x ); // 2
console.log( shape.position.y ); // 5


module.exports = Shape;

//Move Shape


/*
Task

The Shape function will take two arguments: x and y. 
Store these values in an object position on the instance (this).

For reference see this example. The tests will invoke Shape
with the new keyword, creating an object and setting it to 
this within the function.

The position should have keys x and y containing the 
corresponding values:

const shape = new Shape(5, 10);

console.log(shape.position.x) // 5
console.log(shape.position.y) // 10
 Notice that position is an object with two keys x and y!
*/

// Our Shape "Constructor"
function Shape(x, y) {
    // store x and y in this.position
    this.position = {
        x : x,
        y : y
    }
}
/*const shape = new Shape(5, 10);
console.log(shape.position.x); // 5
console.log(shape.position.y); // 10*/

/*
Task
Create a function move that will be added to the
 Shape.prototype. This function should take two 
 arguments: x and y.

It should move the shape's position by adding the corresponding
arguments value:

const shape = new Shape(1, 1);

shape.move(1, 4);

console.log( shape.position.x ); // 2
console.log( shape.position.y ); // 5
*/

function Shape(x,y){
    this.position= {x,y}
}
Shape.prototype.move = function(dx,dy){
    this.position.x += dx;
    this.position.y += dy;

};
const shape = new Shape(1,1);
shape.move(1,4);
console.log( shape.position.x ); // 2
console.log( shape.position.y ); // 5


module.exports = Shape;

//Circle Shape

/*
Your Goal: Complete the Circle Function
In Circle.js, you'll need to do two things:

Pass the arguments to Shape via call.
 Notice we are binding Circle with this using call. This way when Shape is invoked, it will store x and y on the Circle instance!

Store radius on our Circle instance. You can do this exactly how we stored position on the Shape class.
The final result behavior should be:

const circle = new Circle(5,10,15);

console.log(circle.position.x); // 5
console.log(circle.position.y); // 10
console.log(circle.radius); // 15
*/

const Shape = require('./Shape');

function Circle(x, y, radius) {
    Shape.call(this,x, y);
    // store radius on this
    this.radius = radius;
}

module.exports = Circle;



